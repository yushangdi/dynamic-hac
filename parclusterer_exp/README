### Grinch
```
git clone https://github.com/iesl/grinch.git
```

### ALOI 
Download and store data in fvecs format. The labels must be in int.
ALOI data. ALOI data are already scaled to between 0 and 1.
```bash
cd experimental/users/shangdi/parclusterer_exp/
export EXP_ROOT=`pwd`
# download data
wget https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/aloi.scale.bz2
bzcat aloi.scale.bz2 > aloi.scale.raw
# convert to fvecs format and store in colossal. The points are randomly permuted (with fixed seed).
bazel run benchmark:fvecs_converter -- --data_file=$EXP_ROOT/aloi.scale.raw --output_file=benchmark/aloi/aloi.scale.permuted --data=aloi
# (108000, 128)
# num class:  1000
# stored points to  benchmark/aloi/aloi.scale.permuted.fvecs
# labels [635.  62. 837. ... 144. 281. 726.]
# stored labels to  benchmark/aloi/aloi.scale.permuted_label.csv

# remove raw data
rm aloi.scale.raw
rm aloi.scale.bz2
```

Run experiments ParHAC on ALIO, store the clustered result. `l` needs to be greater than `k+1`.
```bash
 bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:parhac_main -- --input_data=benchmark/aloi/aloi.scale.permuted.fvecs --output_clustering=benchmark/result/parhac/aloi --k=50 --max_degree=100 --l=100 2>&1 | tee log_eps_0.1_weight_0.1.txt
```

Plot running time and evaluate Clustering
```bash
bazel run benchmark:process_result -- --input_file=$EXP_ROOT/log_eps_0.1_weight_0.1.txt --output_file=$EXP_ROOT/benchmark/results/fig.png
bazel run benchmark:evaluate_clustering -- --clustering=benchmark/result/parhac/aloi --ground_truth=benchmark/aloi/aloi.scale.permuted_label.csv --log_file=$EXP_ROOT/log_eps_0.1_weight_0.1.txt --output_file=$EXP_ROOT/benchmark/results/fig
```

**Run experiment and plot.**
```bash
cd experimental/users/shangdi/parclusterer_exp/
export EXP_ROOT=`pwd`
bazel build //experimental/users/shangdi/parclusterer_exp/benchmark:parhac_main
bazel run benchmark:run_experiment -- \
--input_data=benchmark/aloi/aloi.scale.permuted.fvecs \
--ground_truth=benchmark/aloi/aloi.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/aloi \
--output_file=$EXP_ROOT/benchmark/results \
--num_batch=100 --weight=0.1
```

### MNIST

<!-- download from https://zenodo.org/records/10359671. -->

MNIST are raw image data, divided by 256 to make all fields between 0 and 1.
It is embedded to 2 dimensions.

```bash
# Embed
bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:embed_mnist -- --plot=True --output=experimental/users/shangdi/parclusterer_exp/
bazel run benchmark:fvecs_converter -- --data_file=$EXP_ROOT --output_file=benchmark/mnist/mnist.scale.permuted --data=mnist
# points shape:  (70000, 2)
# labels shape:  (70000,)
# num class:  10
# stored points to  benchmark/mnist/mnist.scale.permuted.fvecs
# labels [6. 0. 4. ... 9. 5. 3.]
# stored labels to  benchmark/mnist/mnist.scale.permuted_label.csv
```

**Run experiment and plot.**
```bash
cd experimental/users/shangdi/parclusterer_exp/
export EXP_ROOT=`pwd`
bazel run benchmark:run_experiment -- \
--input_data=benchmark/mnist/mnist.scale.permuted.fvecs \
--ground_truth=benchmark/mnist/mnist.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/mnist \
--output_file=$EXP_ROOT/benchmark/results_mnist \
--num_batch=100 --k=50 --weight=0.001


bazel run benchmark:run_experiment -- \
--input_data=benchmark/mnist/mnist.scale.permuted.fvecs \
--ground_truth=benchmark/mnist/mnist.scale.permuted_label.csv \
--clustering=benchmark/result/dynamic_hac/mnist \
--output_file=$EXP_ROOT/benchmark/results_dyn/mnist \
--num_batch=100 --k=50 --weight=0.001

 bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:parhac_main -- \
 --input_data=benchmark/mnist/mnist.scale.permuted.fvecs \
 --output_clustering=benchmark/result/dynamic_hac/mnist \
 --method=dynamic_hac --v=-1 --pbbs_num_workers=1 \
 --num_batch=100 --k=50 --weight_threshold=0.001 \
 --output_knn=benchmark/result/knn/mnist/knn_mnist \
 --use_output_knn 2>&1 | tee benchmark/results_dyn/mnist/log_eps_0.1_weight_0.001.txt

bazel run benchmark:process_result -- \
--input_file=$EXP_ROOT/benchmark/results_dyn/mnist/log_eps_0.1_weight_0.001.txt \
--output_file=$EXP_ROOT/benchmark/results_dyn/mnist/fig_eps_0.1_weight_0.1_1.png
```


**Run dynamic hac**
```bash
 bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:parhac_main -- \
 --input_data=benchmark/mnist/mnist.scale.permuted.fvecs \
 --output_clustering=benchmark/result/dynamic_hac/mnist \
 --method=dynamic_hac --v=-1 --pbbs_num_workers=1 \
 --num_batch=100 --k=50 --weight_threshold=0.001 2>&1 | tee log_dynamic_eps_0.1_weight_0.001.txt

```

### ilsvrc_small
```bash
bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:fvecs_converter -- \
--data_file=data/ilsvrc_small/ilsvrc_small.tsv --data=ilsvrc \
--output_file=benchmark/ilsvrc_small/ilsvrc_small.scale.permuted
# permuting
# points shape:  (50000, 2048)
# labels shape:  (50000,)
# num class:  1000
# stored points to  benchmark/ilsvrc_small/ilsvrc_small.scale.permuted.fvecs
# labels [503. 819. 219. ... 527. 597. 977.]
# stored labels to  benchmark/ilsvrc_small/ilsvrc_small.scale.permuted_label.csv
```


### Imagenet
```bash
bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:fvecs_converter -- \
--data_file=benchmark/imagenet/imagenet.tsv --data=imagenet \
--output_file=benchmark/imagenet/imagenet.scale.permuted
# points shape:  (100000, 2048)
# labels shape:  (100000,)
# num class:  17063
# stored points to  benchmark/imagenet/imagenet.scale.permuted.fvecs
# labels [ 7022.  7744.  4688. ...   840.  3397. 12000.]
# stored labels to  benchmark/imagenet/imagenet.scale.permuted_label.csv

bazel run benchmark:run_experiment -- \
--input_data=benchmark/imagenet/imagenet.scale.permuted.fvecs \
--ground_truth=benchmark/imagenet/imagenet.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/imagenet \
--output_file=$EXP_ROOT/benchmark/results_imagenet \
--num_batch=5 --k=50 --weight=0.1
```

### Covtype

```bash
bazel run //experimental/users/shangdi/parclusterer_exp/benchmark:fvecs_converter \
-- --data_file=data/covtype/covtype.tsv --data=covtype \
--output_file=benchmark/covtype/covtype.scale.permuted
# permuting
# points shape:  (581012, 10)
# labels shape:  (581012,)
# num class:  7
# stored points to  benchmark/covtype/covtype.scale.permuted.fvecs
# labels [1. 2. 2. ... 1. 2. 1.]
# stored labels to  benchmark/covtype/covtype.scale.permuted_label.csv
```

```bash
bazel run benchmark:run_experiment -- \
--input_data=benchmark/covtype/covtype.scale.permuted.fvecs \
--ground_truth=benchmark/covtype/covtype.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/covtype \
--output_file=$EXP_ROOT/benchmark/results_covtype \
--num_batch=5 --k=50 --weight=0.001
```

### iris

```bash
bazel run benchmark:fvecs_converter -- --data_file=$EXP_ROOT --output_file=benchmark/iris/iris.scale.permuted --data=iris

bazel run benchmark:run_experiment -- \
--input_data=benchmark/iris/iris.scale.permuted.fvecs \
--ground_truth=benchmark/iris/iris.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/iris \
--output_file=$EXP_ROOT/benchmark/results_iris \
--num_batch=1 --weight=0.3 --hierarchical


bazel run benchmark:evaluate_clustering -- \
--ground_truth=benchmark/iris/iris.scale.permuted_label.csv \
--clustering=benchmark/result/parhac/iris \
--output_file=$EXP_ROOT/benchmark/results_iris/fig \
--log_file=$EXP_ROOT/benchmark/results_iris/log_eps_0.1_weight_0.3.txt


bazel run benchmark:run_experiment -- --input_data=benchmark/iris/iris.scale.permuted.fvecs \
--ground_truth=benchmark/iris/iris.scale.permuted_label.csv \
--clustering=benchmark/result/dynamic_hac/iris \
--output_file=$EXP_ROOT/benchmark/results_dyn/iris \
--num_batch=2 --weight=0.25 \
--method=dynamic_hac

--output_knn=benchmark/result/dynamic_hac/knn_iris

# bazel run benchmark:fvecs_converter -- --data_file=$EXP_ROOT --output_file=benchmark/iris/iris.scale --data=iris --permute=false

# bazel run benchmark:run_experiment -- \
# --input_data=benchmark/iris/iris.scale.fvecs \
# --ground_truth=benchmark/iris/iris.scale_label.csv \
# --clustering=benchmark/result/parhac/iris \
# --output_file=$EXP_ROOT/benchmark/results \
# --num_batch=1 --weight=0.3
```

### download figures
```bash
cp benchmark/plots/*.png ~/www/
```